buildscript {
    repositories {
        mavenLocal()
        maven {
            url "http://jars.interlis.ch"
        }
        maven {
            url "http://download.osgeo.org/webdav/geotools/"
        }
        mavenCentral()
        jcenter()
    }
}

plugins {
  id "ch.so.agi.gretl" version "1.0.5-SNAPSHOT"
  id "de.undercouch.download" version "3.4.3"
}

import ch.so.agi.gretl.tasks.*
import ch.so.agi.gretl.api.TransferSet
import java.nio.file.Paths
import java.nio.file.Files
import java.util.Date
import java.text.SimpleDateFormat

ext {
    dbUriEdit = "jdbc:postgresql://192.168.50.8/edit"
    dbUserEdit = "ddluser"
    dbPwdEdit = "ddluser"
    dbUriOereb = "jdbc:postgresql://192.168.50.8/edit"
    dbUserOereb = "ddluser"
    dbPwdOereb = "ddluser"

    dbSchemaOerebNutzungsplanungStaging = "arp_npl_oereb_staging" // NPL-Daten in der Edit-DB im ÖREB-Datenmodell 
    dbSchemaOerebStaging = "agi_oereb_staging" // Staging-Schema in der ÖREB-DB für Verifikation ("User Acceptance Test")
    dbSchemaOereb = "agi_oereb" // Finales Schema mit produktiven ÖREB-Daten in der ÖREB-DB. Daten dürfen erst nach Verifikation (=manueller Prozess) hierhin kopiert werden.

    iliModelNutzungsplanung = 'SO_Nutzungsplanung_20171118' // Gefaked mit unserem Nutzungsplanungsmodell.

    // Download-Verzeichnis
    pathToTempFolder = Files.createTempDirectory(Paths.get(System.getProperty("java.io.tmpdir")), "oereb_data_deployment_").toFile().getAbsolutePath()
    pathToUnzipFolder = Paths.get(pathToTempFolder, 'unzip_data')

    // Dateinamen des exportierten Datensatzes.
    exportBaseFileName = "ch.so.arp.nutzungsplanung.oereb"
    exportFileName = exportBaseFileName + ".xtf"

    // Filename-Parameter für Import in die ÖREB-DB (Staging und Produktion)
    // Wird in der Jenkinspipeline übergeben. Kann aber auch normal über CLI 
    // verwendet werden.
    setNonExistingPropertyToUndefinedValue('xtf')
}

// 1. Nachgeführte Daten exportieren.
task exportLandUsePlansDataset(type: Ili2pgExport) {
    database = [dbUriEdit, dbUserEdit, dbPwdEdit]
    models = iliModelNutzungsplanung
    dbschema = dbSchemaOerebNutzungsplanungStaging
    //dataFile = file(Paths.get(pathToTempFolder.toString(), exportFileName))
    dataFile = exportFileName
    dataset = "2502"
    disableValidation = true

    doLast {
        println "Name of exported file: " + dataFile
    }
}

// 2. Nachgeführte Daten in das Staging-Schema der ÖREB-DB importieren.
// -Pxtf=<path/to/file.xtf>
task importLandUsePlansDataSetToOerebStaging(type: Ili2pgReplace) {
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelNutzungsplanung
    dbschema = dbSchemaOerebStaging
    dataFile = xtf
    dataset = "2502"
    disableValidation = true
}

// 3. Nachgeführte Daten in das Produktions-Schema der ÖREB-DB importieren.
// NACH Verifikation der Daten im Staging-Schema
// -Pxtf=<path/to/file.xtf>
task importLandUsePlansDataSetToOerebProduction(type: Ili2pgReplace) {
    database = [dbUriOereb, dbUserOereb, dbPwdOereb]
    models = iliModelNutzungsplanung
    dbschema = dbSchemaOereb
    dataFile = xtf
    dataset = "2502"
    disableValidation = true
}


task fubar() {
    doLast {
        println "******"
        println xtf
    }
}

def setNonExistingPropertyToUndefinedValue(propertyName) {
    setNonExistingPropertyToDefaultValue(propertyName, 'UNDEFINED')
}

def setNonExistingPropertyToDefaultValue(propertyName, defaultValue) {
    if (!project.hasProperty(propertyName)) {
        ext[propertyName] = defaultValue
    }
}



